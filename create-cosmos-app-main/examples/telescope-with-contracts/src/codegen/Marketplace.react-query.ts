/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
} from '@tanstack/react-query';
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee } from '@cosmjs/amino';
import {
  Uint128,
  Duration,
  InstantiateMsg,
  ExpiryRange,
  ExecuteMsg,
  Timestamp,
  Uint64,
  SaleType,
  Coin,
  QueryMsg,
  Addr,
  AskOffset,
  CollectionOffset,
  BidOffset,
  CollectionBidOffset,
  AsksResponse,
  Ask,
  AskCountResponse,
  HooksResponse,
  BidResponse,
  Bid,
  BidsResponse,
  CollectionBidResponse,
  CollectionBid,
  CollectionsResponse,
  Decimal,
  ParamsResponse,
  SudoParams,
} from './Marketplace.types';
import {
  MarketplaceQueryClient,
  MarketplaceClient,
} from './Marketplace.client';
import { useContracts } from './contracts-context';
export interface MarketplaceReactQuery<TResponse, TData = TResponse> {
  client: MarketplaceQueryClient;
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined;
  };
}
export interface MarketplaceParamsQuery<TData>
  extends MarketplaceReactQuery<ParamsResponse, TData> {}
export function useMarketplaceParamsQuery<TData = ParamsResponse>({
  client,
  options,
}: MarketplaceParamsQuery<TData>) {
  return useQuery<ParamsResponse, Error, TData>(
    ['marketplaceParams', client.contractAddress],
    () => client.params(),
    options
  );
}
export interface MarketplaceSaleHooksQuery<TData>
  extends MarketplaceReactQuery<HooksResponse, TData> {}
export function useMarketplaceSaleHooksQuery<TData = HooksResponse>({
  client,
  options,
}: MarketplaceSaleHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(
    ['marketplaceSaleHooks', client.contractAddress],
    () => client.saleHooks(),
    options
  );
}
export interface MarketplaceBidHooksQuery<TData>
  extends MarketplaceReactQuery<HooksResponse, TData> {}
export function useMarketplaceBidHooksQuery<TData = HooksResponse>({
  client,
  options,
}: MarketplaceBidHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(
    ['marketplaceBidHooks', client.contractAddress],
    () => client.bidHooks(),
    options
  );
}
export interface MarketplaceAskHooksQuery<TData>
  extends MarketplaceReactQuery<HooksResponse, TData> {}
export function useMarketplaceAskHooksQuery<TData = HooksResponse>({
  client,
  options,
}: MarketplaceAskHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(
    ['marketplaceAskHooks', client.contractAddress],
    () => client.askHooks(),
    options
  );
}
export interface MarketplaceReverseCollectionBidsSortedByPriceQuery<TData>
  extends MarketplaceReactQuery<CollectionBidResponse, TData> {
  args: {
    collection: string;
    limit?: number;
    startBefore?: CollectionBidOffset;
  };
}
export function useMarketplaceReverseCollectionBidsSortedByPriceQuery<
  TData = CollectionBidResponse
>({
  client,
  args,
  options,
}: MarketplaceReverseCollectionBidsSortedByPriceQuery<TData>) {
  return useQuery<CollectionBidResponse, Error, TData>(
    [
      'marketplaceReverseCollectionBidsSortedByPrice',
      client.contractAddress,
      JSON.stringify(args),
    ],
    () =>
      client.reverseCollectionBidsSortedByPrice({
        collection: args.collection,
        limit: args.limit,
        startBefore: args.startBefore,
      }),
    options
  );
}
export interface MarketplaceCollectionBidsSortedByPriceQuery<TData>
  extends MarketplaceReactQuery<CollectionBidResponse, TData> {
  args: {
    collection: string;
    limit?: number;
    startAfter?: CollectionBidOffset;
  };
}
export function useMarketplaceCollectionBidsSortedByPriceQuery<
  TData = CollectionBidResponse
>({
  client,
  args,
  options,
}: MarketplaceCollectionBidsSortedByPriceQuery<TData>) {
  return useQuery<CollectionBidResponse, Error, TData>(
    [
      'marketplaceCollectionBidsSortedByPrice',
      client.contractAddress,
      JSON.stringify(args),
    ],
    () =>
      client.collectionBidsSortedByPrice({
        collection: args.collection,
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    options
  );
}
export interface MarketplaceCollectionBidsByBidderSortedByExpirationQuery<TData>
  extends MarketplaceReactQuery<CollectionBidResponse, TData> {
  args: {
    bidder: string;
    limit?: number;
    startAfter?: CollectionBidOffset;
  };
}
export function useMarketplaceCollectionBidsByBidderSortedByExpirationQuery<
  TData = CollectionBidResponse
>({
  client,
  args,
  options,
}: MarketplaceCollectionBidsByBidderSortedByExpirationQuery<TData>) {
  return useQuery<CollectionBidResponse, Error, TData>(
    [
      'marketplaceCollectionBidsByBidderSortedByExpiration',
      client.contractAddress,
      JSON.stringify(args),
    ],
    () =>
      client.collectionBidsByBidderSortedByExpiration({
        bidder: args.bidder,
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    options
  );
}
export interface MarketplaceCollectionBidsByBidderQuery<TData>
  extends MarketplaceReactQuery<CollectionBidResponse, TData> {
  args: {
    bidder: string;
    limit?: number;
    startAfter?: CollectionOffset;
  };
}
export function useMarketplaceCollectionBidsByBidderQuery<
  TData = CollectionBidResponse
>({ client, args, options }: MarketplaceCollectionBidsByBidderQuery<TData>) {
  return useQuery<CollectionBidResponse, Error, TData>(
    [
      'marketplaceCollectionBidsByBidder',
      client.contractAddress,
      JSON.stringify(args),
    ],
    () =>
      client.collectionBidsByBidder({
        bidder: args.bidder,
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    options
  );
}
export interface MarketplaceCollectionBidQuery<TData>
  extends MarketplaceReactQuery<CollectionBidResponse, TData> {
  args: {
    bidder: string;
    collection: string;
  };
}
export function useMarketplaceCollectionBidQuery<
  TData = CollectionBidResponse
>({ client, args, options }: MarketplaceCollectionBidQuery<TData>) {
  return useQuery<CollectionBidResponse, Error, TData>(
    ['marketplaceCollectionBid', client.contractAddress, JSON.stringify(args)],
    () =>
      client.collectionBid({
        bidder: args.bidder,
        collection: args.collection,
      }),
    options
  );
}
export interface MarketplaceReverseBidsSortedByPriceQuery<TData>
  extends MarketplaceReactQuery<BidsResponse, TData> {
  args: {
    collection: string;
    limit?: number;
    startBefore?: BidOffset;
  };
}
export function useMarketplaceReverseBidsSortedByPriceQuery<
  TData = BidsResponse
>({ client, args, options }: MarketplaceReverseBidsSortedByPriceQuery<TData>) {
  return useQuery<BidsResponse, Error, TData>(
    [
      'marketplaceReverseBidsSortedByPrice',
      client.contractAddress,
      JSON.stringify(args),
    ],
    () =>
      client.reverseBidsSortedByPrice({
        collection: args.collection,
        limit: args.limit,
        startBefore: args.startBefore,
      }),
    options
  );
}
export interface MarketplaceBidsSortedByPriceQuery<TData>
  extends MarketplaceReactQuery<BidsResponse, TData> {
  args: {
    collection: string;
    limit?: number;
    startAfter?: BidOffset;
  };
}
export function useMarketplaceBidsSortedByPriceQuery<TData = BidsResponse>({
  client,
  args,
  options,
}: MarketplaceBidsSortedByPriceQuery<TData>) {
  return useQuery<BidsResponse, Error, TData>(
    [
      'marketplaceBidsSortedByPrice',
      client.contractAddress,
      JSON.stringify(args),
    ],
    () =>
      client.bidsSortedByPrice({
        collection: args.collection,
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    options
  );
}
export interface MarketplaceBidsQuery<TData>
  extends MarketplaceReactQuery<BidsResponse, TData> {
  args: {
    collection: string;
    limit?: number;
    startAfter?: string;
    tokenId: number;
  };
}
export function useMarketplaceBidsQuery<TData = BidsResponse>({
  client,
  args,
  options,
}: MarketplaceBidsQuery<TData>) {
  return useQuery<BidsResponse, Error, TData>(
    ['marketplaceBids', client.contractAddress, JSON.stringify(args)],
    () =>
      client.bids({
        collection: args.collection,
        limit: args.limit,
        startAfter: args.startAfter,
        tokenId: args.tokenId,
      }),
    options
  );
}
export interface MarketplaceBidsByBidderSortedByExpirationQuery<TData>
  extends MarketplaceReactQuery<BidsResponse, TData> {
  args: {
    bidder: string;
    limit?: number;
    startAfter?: CollectionOffset;
  };
}
export function useMarketplaceBidsByBidderSortedByExpirationQuery<
  TData = BidsResponse
>({
  client,
  args,
  options,
}: MarketplaceBidsByBidderSortedByExpirationQuery<TData>) {
  return useQuery<BidsResponse, Error, TData>(
    [
      'marketplaceBidsByBidderSortedByExpiration',
      client.contractAddress,
      JSON.stringify(args),
    ],
    () =>
      client.bidsByBidderSortedByExpiration({
        bidder: args.bidder,
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    options
  );
}
export interface MarketplaceBidsByBidderQuery<TData>
  extends MarketplaceReactQuery<BidsResponse, TData> {
  args: {
    bidder: string;
    limit?: number;
    startAfter?: CollectionOffset;
  };
}
export function useMarketplaceBidsByBidderQuery<TData = BidsResponse>({
  client,
  args,
  options,
}: MarketplaceBidsByBidderQuery<TData>) {
  return useQuery<BidsResponse, Error, TData>(
    ['marketplaceBidsByBidder', client.contractAddress, JSON.stringify(args)],
    () =>
      client.bidsByBidder({
        bidder: args.bidder,
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    options
  );
}
export interface MarketplaceBidQuery<TData>
  extends MarketplaceReactQuery<BidResponse, TData> {
  args: {
    bidder: string;
    collection: string;
    tokenId: number;
  };
}
export function useMarketplaceBidQuery<TData = BidResponse>({
  client,
  args,
  options,
}: MarketplaceBidQuery<TData>) {
  return useQuery<BidResponse, Error, TData>(
    ['marketplaceBid', client.contractAddress, JSON.stringify(args)],
    () =>
      client.bid({
        bidder: args.bidder,
        collection: args.collection,
        tokenId: args.tokenId,
      }),
    options
  );
}
export interface MarketplaceAsksBySellerQuery<TData>
  extends MarketplaceReactQuery<AsksResponse, TData> {
  args: {
    includeInactive?: boolean;
    limit?: number;
    seller: string;
    startAfter?: CollectionOffset;
  };
}
export function useMarketplaceAsksBySellerQuery<TData = AsksResponse>({
  client,
  args,
  options,
}: MarketplaceAsksBySellerQuery<TData>) {
  return useQuery<AsksResponse, Error, TData>(
    ['marketplaceAsksBySeller', client.contractAddress, JSON.stringify(args)],
    () =>
      client.asksBySeller({
        includeInactive: args.includeInactive,
        limit: args.limit,
        seller: args.seller,
        startAfter: args.startAfter,
      }),
    options
  );
}
export interface MarketplaceAskCountQuery<TData>
  extends MarketplaceReactQuery<AskCountResponse, TData> {
  args: {
    collection: string;
  };
}
export function useMarketplaceAskCountQuery<TData = AskCountResponse>({
  client,
  args,
  options,
}: MarketplaceAskCountQuery<TData>) {
  return useQuery<AskCountResponse, Error, TData>(
    ['marketplaceAskCount', client.contractAddress, JSON.stringify(args)],
    () =>
      client.askCount({
        collection: args.collection,
      }),
    options
  );
}
export interface MarketplaceReverseAsksSortedByPriceQuery<TData>
  extends MarketplaceReactQuery<AsksResponse, TData> {
  args: {
    collection: string;
    includeInactive?: boolean;
    limit?: number;
    startBefore?: AskOffset;
  };
}
export function useMarketplaceReverseAsksSortedByPriceQuery<
  TData = AsksResponse
>({ client, args, options }: MarketplaceReverseAsksSortedByPriceQuery<TData>) {
  return useQuery<AsksResponse, Error, TData>(
    [
      'marketplaceReverseAsksSortedByPrice',
      client.contractAddress,
      JSON.stringify(args),
    ],
    () =>
      client.reverseAsksSortedByPrice({
        collection: args.collection,
        includeInactive: args.includeInactive,
        limit: args.limit,
        startBefore: args.startBefore,
      }),
    options
  );
}
export interface MarketplaceAsksSortedByPriceQuery<TData>
  extends MarketplaceReactQuery<AsksResponse, TData> {
  args: {
    collection: string;
    includeInactive?: boolean;
    limit?: number;
    startAfter?: AskOffset;
  };
}
export function useMarketplaceAsksSortedByPriceQuery<TData = AsksResponse>({
  client,
  args,
  options,
}: MarketplaceAsksSortedByPriceQuery<TData>) {
  return useQuery<AsksResponse, Error, TData>(
    [
      'marketplaceAsksSortedByPrice',
      client.contractAddress,
      JSON.stringify(args),
    ],
    () =>
      client.asksSortedByPrice({
        collection: args.collection,
        includeInactive: args.includeInactive,
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    options
  );
}
export interface MarketplaceReverseAsksQuery<TData>
  extends MarketplaceReactQuery<AsksResponse, TData> {
  args: {
    collection: string;
    includeInactive?: boolean;
    limit?: number;
    startBefore?: number;
  };
}
export function useMarketplaceReverseAsksQuery<TData = AsksResponse>({
  client,
  args,
  options,
}: MarketplaceReverseAsksQuery<TData>) {
  return useQuery<AsksResponse, Error, TData>(
    ['marketplaceReverseAsks', client.contractAddress, JSON.stringify(args)],
    () =>
      client.reverseAsks({
        collection: args.collection,
        includeInactive: args.includeInactive,
        limit: args.limit,
        startBefore: args.startBefore,
      }),
    options
  );
}
export interface MarketplaceAsksQuery<TData>
  extends MarketplaceReactQuery<AsksResponse, TData> {
  args: {
    collection: string;
    includeInactive?: boolean;
    limit?: number;
    startAfter?: number;
  };
}
export function useMarketplaceAsksQuery<TData = AsksResponse>({
  client,
  args,
  options,
}: MarketplaceAsksQuery<TData>) {
  return useQuery<AsksResponse, Error, TData>(
    ['marketplaceAsks', client.contractAddress, JSON.stringify(args)],
    () =>
      client.asks({
        collection: args.collection,
        includeInactive: args.includeInactive,
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    options
  );
}
export interface MarketplaceAskQuery<TData>
  extends MarketplaceReactQuery<AsksResponse, TData> {
  args: {
    collection: string;
    tokenId: number;
  };
}
export function useMarketplaceAskQuery<TData = AsksResponse>({
  client,
  args,
  options,
}: MarketplaceAskQuery<TData>) {
  return useQuery<AsksResponse, Error, TData>(
    ['marketplaceAsk', client.contractAddress, JSON.stringify(args)],
    () =>
      client.ask({
        collection: args.collection,
        tokenId: args.tokenId,
      }),
    options
  );
}
export interface MarketplaceCollectionsQuery<TData>
  extends MarketplaceReactQuery<CollectionsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useMarketplaceCollectionsQuery<TData = CollectionsResponse>({
  client,
  args,
  options,
}: MarketplaceCollectionsQuery<TData>) {
  return useQuery<CollectionsResponse, Error, TData>(
    ['marketplaceCollections', client.contractAddress, JSON.stringify(args)],
    () =>
      client.collections({
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    options
  );
}
export interface MarketplaceRemoveStaleCollectionBidMutation {
  client: MarketplaceClient;
  msg: {
    bidder: string;
    collection: string;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceRemoveStaleCollectionBidMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MarketplaceRemoveStaleCollectionBidMutation
    >,
    'mutationFn'
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MarketplaceRemoveStaleCollectionBidMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.removeStaleCollectionBid(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceRemoveStaleBidMutation {
  client: MarketplaceClient;
  msg: {
    bidder: string;
    collection: string;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceRemoveStaleBidMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarketplaceRemoveStaleBidMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MarketplaceRemoveStaleBidMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.removeStaleBid(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceRemoveStaleAskMutation {
  client: MarketplaceClient;
  msg: {
    collection: string;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceRemoveStaleAskMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarketplaceRemoveStaleAskMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MarketplaceRemoveStaleAskMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.removeStaleAsk(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceSyncAskMutation {
  client: MarketplaceClient;
  msg: {
    collection: string;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceSyncAskMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarketplaceSyncAskMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MarketplaceSyncAskMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.syncAsk(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceAcceptCollectionBidMutation {
  client: MarketplaceClient;
  msg: {
    bidder: string;
    collection: string;
    finder?: string;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceAcceptCollectionBidMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MarketplaceAcceptCollectionBidMutation
    >,
    'mutationFn'
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MarketplaceAcceptCollectionBidMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.acceptCollectionBid(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceRemoveCollectionBidMutation {
  client: MarketplaceClient;
  msg: {
    collection: string;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceRemoveCollectionBidMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MarketplaceRemoveCollectionBidMutation
    >,
    'mutationFn'
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MarketplaceRemoveCollectionBidMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.removeCollectionBid(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceSetCollectionBidMutation {
  client: MarketplaceClient;
  msg: {
    collection: string;
    expires: Timestamp;
    findersFeeBps?: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceSetCollectionBidMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MarketplaceSetCollectionBidMutation
    >,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MarketplaceSetCollectionBidMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.setCollectionBid(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceRejectBidMutation {
  client: MarketplaceClient;
  msg: {
    bidder: string;
    collection: string;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceRejectBidMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarketplaceRejectBidMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MarketplaceRejectBidMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.rejectBid(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceAcceptBidMutation {
  client: MarketplaceClient;
  msg: {
    bidder: string;
    collection: string;
    finder?: string;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceAcceptBidMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarketplaceAcceptBidMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MarketplaceAcceptBidMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.acceptBid(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceRemoveBidMutation {
  client: MarketplaceClient;
  msg: {
    collection: string;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceRemoveBidMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarketplaceRemoveBidMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MarketplaceRemoveBidMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.removeBid(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceBuyNowMutation {
  client: MarketplaceClient;
  msg: {
    collection: string;
    expires: Timestamp;
    finder?: string;
    findersFeeBps?: number;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceBuyNowMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarketplaceBuyNowMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MarketplaceBuyNowMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.buyNow(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceSetBidMutation {
  client: MarketplaceClient;
  msg: {
    collection: string;
    expires: Timestamp;
    finder?: string;
    findersFeeBps?: number;
    saleType: SaleType;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceSetBidMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarketplaceSetBidMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MarketplaceSetBidMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.setBid(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceUpdateAskPriceMutation {
  client: MarketplaceClient | string;
  msg: {
    collection: string;
    price: Coin;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceUpdateAskPriceMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarketplaceUpdateAskPriceMutation>,
    'mutationFn'
  >
) {
  const { marketplace } = useContracts();

  return useMutation<ExecuteResult, Error, MarketplaceUpdateAskPriceMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => {
      let c = typeof client === 'string' ? marketplace.getSigningClient(client) : client;

      return c.updateAskPrice(msg, fee, memo, funds);
    },
    options
  );
}
export interface MarketplaceRemoveAskMutation {
  client: MarketplaceClient;
  msg: {
    collection: string;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceRemoveAskMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarketplaceRemoveAskMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MarketplaceRemoveAskMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.removeAsk(msg, fee, memo, funds),
    options
  );
}
export interface MarketplaceSetAskMutation {
  client: MarketplaceClient;
  msg: {
    collection: string;
    expires: Timestamp;
    findersFeeBps?: number;
    fundsRecipient?: string;
    price: Coin;
    reserveFor?: string;
    saleType: SaleType;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceSetAskMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarketplaceSetAskMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MarketplaceSetAskMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.setAsk(msg, fee, memo, funds),
    options
  );
}
